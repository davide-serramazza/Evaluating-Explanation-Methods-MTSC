from torch.utils.data import Dataset
from sklearn.preprocessing import OneHotEncoder


import numpy as np
import torch


class myDataset(Dataset):

    "class dataset that for every image laod original image, .mha map and tree generated by glia"

    files = []
    image_names = []

    def __init__(self, X,y):
        """
        Args:
            root_dir (string): Directory with all the images.
            transform (callable, optional): Optional transform to be applied
                on a sample.
        """

        encoder = OneHotEncoder(categories='auto', sparse=False)
        y_oneHot = encoder.fit_transform(np.expand_dims(y, axis=-1))

        device = device = "cuda" if torch.cuda.is_available() else "cpu"

        self.X= torch.from_numpy(X).to(device)
        self.y= torch.Tensor(y_oneHot).to(device)

    def __len__(self):
        return self.X.shape[0]

    def __getitem__(self, idx):
        return self.X[idx], self.y[idx]